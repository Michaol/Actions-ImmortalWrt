#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04 # 确保你已检查过 GitHub Actions 文档，这个标签是最新的且可用的

    steps:
    - name: Checkout
      uses: actions/checkout@v4 # 推荐使用特定版本号，避免不兼容更新

    # --- 空间清理步骤（优化重点）---
    - name: Free Up Disk Space (Early Stage)
      uses: jlumbroso/free-disk-space@v5 # 使用专门的 Action 替代部分手动 rm
      with:
        # tool-cache: true # 默认是false，如果你的构建不依赖预安装的工具（如特定版本的Go/Python/Node等），可以设置为true来清理更多空间
        # docker-images: true # 如果你的构建不使用Docker，可以设置为true，清理Docker镜像通常能释放大量空间
        # android-sdk: true # 如果你的构建不涉及Android开发，可以设置为true
        # haskell: true
        # codeql: true
        # go: true
        # dotnet: true
        # ruby: true
        # swift: true
        # large-packages: true # 移除一些大型的预安装包
        # apt: true # 清理apt缓存，通常很安全
        # 建议根据你的实际需求，只启用那些你确定不需要的工具清理，以避免不必要的下载。
        # 保持默认（只清理一些通用垃圾）通常就很有帮助。
        # 这里为了最大化，我们默认清理docker images和大型包，以及apt缓存。
        android-sdk: true
        docker-images: true
        large-packages: true
        apt: true # 清理apt缓存

    - name: Custom Cleanup (Manual)
      run: |
        # 补充 jlumbroso/free-disk-space 可能未覆盖到的路径
        sudo rm -rf /usr/share/dotnet /opt/ghc /opt/hostedtoolcache/CodeQL # 你的原先清理，保留
        # 进一步清理，确保路径存在且不会影响后续编译
        sudo rm -rf /usr/local/lib/android # 如果你确定不需要Android SDK
        sudo apt autoremove --purge -y # 清理不再需要的依赖包

    # --- 环境初始化（保留并优化）---
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # sudo -E apt-get update # jlumbroso/free-disk-space@v5 的 apt: true 已经清理了 apt 缓存，这里可以省略，如果清理后再update会有新的缓存
        sudo -E apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -hT $PWD # 再次检查空间，看看清理效果

    # --- 克隆源码（保持）---
    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    # --- 缓存（保留）---
    - name: Cache
      uses: klever1988/cachewrtbuild@main # 这是一个针对OpenWrt的专用缓存Action，很好
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    # --- 载入自定义 feeds & 更新/安装 feeds (保持) ---
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    # --- 载入自定义配置 (保持) ---
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    # --- 下载软件包 (保持) ---
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc) # 优化下载并行数，利用多核
        # 你的原有清理小文件步骤很棒，保留
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # --- 编译固件（优化）---
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        # make -j$(nproc) || make -j1 || make -j1 V=s # 保留你的编译命令，这是鲁棒的
        make -j$(nproc) # 简化，如果失败会通过 exit code 触发后续 if 语句的跳过
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # --- 编译后清理（新增优化）---
    - name: Clean Build Directory after Compile
      if: steps.compile.outputs.status == 'success' # 仅在编译成功后清理，避免调试时误删
      run: |
        echo "Cleaning up build artifacts to save space..."
        cd openwrt
        # 删除所有中间编译文件，只保留 bin 和 dl
        # 重要的目录：bin/targets (固件), dl (下载的包)
        # 可以安全删除的目录：build_dir, staging_dir, logs, tmp
        # 注意：这里可能会删除缓存恢复的文件，如果缓存策略是保留 build_dir，需要调整
        rm -rf build_dir/* # 删除所有架构的编译中间文件
        rm -rf staging_dir/* # 删除所有架构的 staging 文件
        # rm -rf tmp # 编译成功后，tmp 目录也可以删除
        # rm -rf logs # 编译日志也可以删除
        # 如果你确定 dl 目录不再需要（例如，你只编译一次就上传，不期望复用 dl）
        # 可以考虑在这里删除： rm -rf dl
        df -hT $PWD # 再次检查空间使用情况

    # --- 检查空间使用（保留）---
    - name: Check space usage (End of Job)
      if: (!cancelled())
      run: df -hT

    # --- 上传 bin 目录（保留）---
    - name: Upload bin directory
      uses: actions/upload-artifact@v4 # 推荐使用特定版本号
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    # --- 整理文件（保留）---
    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages # 再次清理 packages 目录，通常固件中已包含，不需要单独上传
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    # --- 上传固件目录（保留）---
    - name: Upload firmware directory
      uses: actions/upload-artifact@v4 # 推荐使用特定版本号
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    # --- 后续的 release 和 workflow/release 清理（保留）---
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        # [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt # 你的 env 中没有 UPLOAD_GOFILE，如果不需要 GoFile 可以删除
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1 # 推荐使用特定版本号
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2 # 推荐使用特定版本号
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v1 # 推荐使用特定版本号
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
